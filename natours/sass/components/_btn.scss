/* :link is a pseudo class */
.btn {
	&:link,
	&:visited {
		text-transform: uppercase;
		text-decoration: none;
		padding: 1.5rem 4rem;
		display: inline-block;	/* We always have to set this to apply paddings, heights, width, etc to elements */
		border-radius: 10rem;
		transition: all .2s;		/* All to say to apply animation to all the properties, if we wante d to only 1 property, we need to specify that */
		box-shadow: 0 1rem 2rem rgba($color-black, .2);	 /* x y blur color */
		position: relative;	/* This is to let this element's children to position themselves with reference on the parent */
		font-size: 1.6rem;
	}
	
	&:hover {
		transform: translateY(-3px);
		box-shadow: 0 .5rem 1rem rgba($color-black, .2);	 /*  */

		/* When we hover the after pseudo element of .btn element, then: */
		&::after {
			transform: scale(1.1);	/* Increases the size of the element times the number inside */
			opacity: 0;
		}
		
	}
	
	&:active {
		transform: translateY(-1px);
	}
	
	&--white {
		background-color: $color-white;
		color: $color-grey-dark;

		&::after {
			background-color: $color-white;
		}
	}
	
	&::after {
		content: "";
		display: inline-block; /* This has to be the same as the parent (.btn) */
		height: 100%;	/* 100% of the width of the parent (.btn) */
		width: 100%;
		border-radius: 10rem;
		position: absolute;	/* This is to not make space for this element as a normal block would have */
		top: 0;	/* Then we position it on the same position as its parent */
		left: 0;
		z-index: -1; /* Defines the position if an element is on top or below another element */
		transition: all .4s;
	}
	
	&--animated {
		animation: moveInBottom 1s ease-out 1s;	/* Final argument (.75s) is for the delay to start the animation */
		animation-fill-mode: backwards;	/* We specify backwards so the properties of the animation are applied since the beginning */
	}
}